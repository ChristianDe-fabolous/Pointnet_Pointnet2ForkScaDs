# This is a sample Python script.

# Press Umschalt+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.

import os
import laspy as lp
import pandas as pd
import open3d as o3d
from plyfile import PlyData, PlyElement
import numpy as np

def normalize_coordinates(df, point_cloud):
    scale_x = point_cloud.header.scale[0]
    offset_x = point_cloud.header.offset[0]
    scale_y = point_cloud.header.scale[1]
    offset_y = point_cloud.header.offset[1]
    scale_z = point_cloud.header.scale[2]
    offset_z = point_cloud.header.offset[2]
    df['X'] = df['X'] * scale_x + offset_x
    df['Y'] = df['Y'] * scale_y + offset_y
    df['Z'] = df['Z'] * scale_z + offset_z
    return df
def normalize_colors(df):
    color_min = 255
    color_max = 65535
    df['red'] = (df['red'] - color_min) / (color_max - color_min)
    df['green'] = (df['green'] - color_min) / (color_max - color_min)
    df['blue'] = (df['blue'] - color_min) / (color_max - color_min)
    return df

def visualizePointCloudLAZ(filepath):

    las_file = filepath
    point_cloud = lp.read(las_file)
    # Create a new dictionary to hold our data
    data = {}
    for dimension in point_cloud.point_format.dimensions:
        data[dimension.name] = getattr(point_cloud, dimension.name)
    print(data)
    print(len(data))
    # Convert dictionary to pandas DataFrame
    df = pd.DataFrame(data)
    df = normalize_coordinates(df, point_cloud)
    df = normalize_colors(df)

    # Load PointCloud into PCD
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(df[['X', 'Y', 'Z']].values)
    pcd.colors = o3d.utility.Vector3dVector(df[['red', 'green', 'blue']].values)
    # show entire point cloud
    o3d.visualization.draw_geometries([pcd])


# Convert ply-files to txt-files
def plyfiles():
    directory_path = 'data/buildings_zentrum_nord'
    files = os.listdir(directory_path)
    header = ['X', 'Y', 'Z', 'red', 'green', 'blue']

    i = 0
    for file_name in files:
        # Counter for numberofFiles
        if i == 10:
            break
        file_path = os.path.join(directory_path, file_name)
        plydata = PlyData.read(file_path)
        cntDP = len(plydata.elements[0])

        # Write new txt-file
        with open(os.path.join('/home/christian/Schreibtisch/text_files', file_name[:-4]), 'w') as file_txt:
            for dpIndex in range(cntDP):
                tupleValues = [str(value) for value in plydata.elements[0][dpIndex]]
                file_txt.write(", ".join(tupleValues))
                file_txt.write('\n')
        i += 1


    data = {}
    header = ['X', 'Y', 'Z', 'red', 'green', 'blue']
    for index, headerElement in enumerate(header):
        data[headerElement] = np.zeros(cntDP)
        tmpNPArray = np.zeros(len(plydata.elements[0]))
        for dpIndex in range(cntDP):
            data[headerElement][dpIndex] = plydata.elements[0][dpIndex][index]

def visualizePointCloudPLY(filepath):

    plydata = PlyData.read(filepath)

    data = {}
    cntDP = len(plydata.elements[0])
    header = ['X', 'Y', 'Z', 'red', 'green', 'blue']
    for index, headerElement in enumerate(header):
        data[headerElement] = np.zeros(cntDP)
        tmpNPArray = np.zeros(len(plydata.elements[0]))
        for dpIndex in range(cntDP):
            data[headerElement][dpIndex] = plydata.elements[0][dpIndex][index]


    df = pd.DataFrame(data)

    df = normalize_colors(df)
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(df[['X', 'Y', 'Z']].values)
    pcd.colors = o3d.utility.Vector3dVector(df[['red', 'green', 'blue']].values)
    # show entire point cloud
    o3d.visualization.draw_geometries([pcd])


def visualizePointCloudTXT(filepath):
    plydata = PlyData.read(filepath)

    data = {}
    cntDP = len(plydata.elements[0])
    header = ['X', 'Y', 'Z', 'red', 'green', 'blue']
    for index, headerElement in enumerate(header):
        data[headerElement] = np.zeros(cntDP)
        tmpNPArray = np.zeros(len(plydata.elements[0]))
        for dpIndex in range(cntDP):
            data[headerElement][dpIndex] = plydata.elements[0][dpIndex][index]

    df = pd.DataFrame(data)

    df = normalize_colors(df)
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(df[['X', 'Y', 'Z']].values)
    pcd.colors = o3d.utility.Vector3dVector(df[['red', 'green', 'blue']].values)
    # show entire point cloud
    o3d.visualization.draw_geometries([pcd])





if __name__ == '__main__':
    #plyfiles()
    visualizePointCloudLAZ('/home/christian/Downloads/filtered_6376_113815.laz')
    visualizePointCloudPLY('/home/christian/Downloads/DESN_000CCJE.ply')
    visualizePointCloudTXT('/home/christian/Schreibtisch/text_files/DESN_000CCJE')




